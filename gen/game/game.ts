// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: game/game.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Room } from "../common/common";

export const protobufPackage = "roshan.games";

export enum GameKind {
  GAME_KIND_UNSPECIFIED = 0,
  GAME_KIND_TICTACTOE = 1,
  UNRECOGNIZED = -1,
}

export function gameKindFromJSON(object: any): GameKind {
  switch (object) {
    case 0:
    case "GAME_KIND_UNSPECIFIED":
      return GameKind.GAME_KIND_UNSPECIFIED;
    case 1:
    case "GAME_KIND_TICTACTOE":
      return GameKind.GAME_KIND_TICTACTOE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GameKind.UNRECOGNIZED;
  }
}

export function gameKindToJSON(object: GameKind): string {
  switch (object) {
    case GameKind.GAME_KIND_UNSPECIFIED:
      return "GAME_KIND_UNSPECIFIED";
    case GameKind.GAME_KIND_TICTACTOE:
      return "GAME_KIND_TICTACTOE";
    case GameKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Team {
  TEAM_UNSPECIFIED = 0,
  TEAM_SPECTATOR = 1,
  TEAM_1 = 2,
  TEAM_2 = 3,
  UNRECOGNIZED = -1,
}

export function teamFromJSON(object: any): Team {
  switch (object) {
    case 0:
    case "TEAM_UNSPECIFIED":
      return Team.TEAM_UNSPECIFIED;
    case 1:
    case "TEAM_SPECTATOR":
      return Team.TEAM_SPECTATOR;
    case 2:
    case "TEAM_1":
      return Team.TEAM_1;
    case 3:
    case "TEAM_2":
      return Team.TEAM_2;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Team.UNRECOGNIZED;
  }
}

export function teamToJSON(object: Team): string {
  switch (object) {
    case Team.TEAM_UNSPECIFIED:
      return "TEAM_UNSPECIFIED";
    case Team.TEAM_SPECTATOR:
      return "TEAM_SPECTATOR";
    case Team.TEAM_1:
      return "TEAM_1";
    case Team.TEAM_2:
      return "TEAM_2";
    case Team.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CreateGameRoomRequest {
  name: string;
  kind: GameKind;
}

export interface CreateGameRoomResponse {
  room: Room | undefined;
}

export interface ListGameRoomsRequest {
}

export interface ListGameRoomsResponse {
  rooms: Room[];
}

export interface DeleteGameRoomRequest {
  id: string;
}

export interface DeleteGameRoomResponse {
  room: Room | undefined;
}

export interface StartGameRequest {
  id: string;
}

export interface StartGameResponse {
}

function createBaseCreateGameRoomRequest(): CreateGameRoomRequest {
  return { name: "", kind: 0 };
}

export const CreateGameRoomRequest: MessageFns<CreateGameRoomRequest, "roshan.games.CreateGameRoomRequest"> = {
  $type: "roshan.games.CreateGameRoomRequest" as const,

  encode(message: CreateGameRoomRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.kind !== 0) {
      writer.uint32(16).int32(message.kind);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateGameRoomRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateGameRoomRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateGameRoomRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      kind: isSet(object.kind) ? gameKindFromJSON(object.kind) : 0,
    };
  },

  toJSON(message: CreateGameRoomRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.kind !== 0) {
      obj.kind = gameKindToJSON(message.kind);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateGameRoomRequest>, I>>(base?: I): CreateGameRoomRequest {
    return CreateGameRoomRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateGameRoomRequest>, I>>(object: I): CreateGameRoomRequest {
    const message = createBaseCreateGameRoomRequest();
    message.name = object.name ?? "";
    message.kind = object.kind ?? 0;
    return message;
  },
};

function createBaseCreateGameRoomResponse(): CreateGameRoomResponse {
  return { room: undefined };
}

export const CreateGameRoomResponse: MessageFns<CreateGameRoomResponse, "roshan.games.CreateGameRoomResponse"> = {
  $type: "roshan.games.CreateGameRoomResponse" as const,

  encode(message: CreateGameRoomResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.room !== undefined) {
      Room.encode(message.room, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateGameRoomResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateGameRoomResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.room = Room.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateGameRoomResponse {
    return { room: isSet(object.room) ? Room.fromJSON(object.room) : undefined };
  },

  toJSON(message: CreateGameRoomResponse): unknown {
    const obj: any = {};
    if (message.room !== undefined) {
      obj.room = Room.toJSON(message.room);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateGameRoomResponse>, I>>(base?: I): CreateGameRoomResponse {
    return CreateGameRoomResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateGameRoomResponse>, I>>(object: I): CreateGameRoomResponse {
    const message = createBaseCreateGameRoomResponse();
    message.room = (object.room !== undefined && object.room !== null) ? Room.fromPartial(object.room) : undefined;
    return message;
  },
};

function createBaseListGameRoomsRequest(): ListGameRoomsRequest {
  return {};
}

export const ListGameRoomsRequest: MessageFns<ListGameRoomsRequest, "roshan.games.ListGameRoomsRequest"> = {
  $type: "roshan.games.ListGameRoomsRequest" as const,

  encode(_: ListGameRoomsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGameRoomsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGameRoomsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListGameRoomsRequest {
    return {};
  },

  toJSON(_: ListGameRoomsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListGameRoomsRequest>, I>>(base?: I): ListGameRoomsRequest {
    return ListGameRoomsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListGameRoomsRequest>, I>>(_: I): ListGameRoomsRequest {
    const message = createBaseListGameRoomsRequest();
    return message;
  },
};

function createBaseListGameRoomsResponse(): ListGameRoomsResponse {
  return { rooms: [] };
}

export const ListGameRoomsResponse: MessageFns<ListGameRoomsResponse, "roshan.games.ListGameRoomsResponse"> = {
  $type: "roshan.games.ListGameRoomsResponse" as const,

  encode(message: ListGameRoomsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rooms) {
      Room.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGameRoomsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGameRoomsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rooms.push(Room.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGameRoomsResponse {
    return { rooms: globalThis.Array.isArray(object?.rooms) ? object.rooms.map((e: any) => Room.fromJSON(e)) : [] };
  },

  toJSON(message: ListGameRoomsResponse): unknown {
    const obj: any = {};
    if (message.rooms?.length) {
      obj.rooms = message.rooms.map((e) => Room.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListGameRoomsResponse>, I>>(base?: I): ListGameRoomsResponse {
    return ListGameRoomsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListGameRoomsResponse>, I>>(object: I): ListGameRoomsResponse {
    const message = createBaseListGameRoomsResponse();
    message.rooms = object.rooms?.map((e) => Room.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeleteGameRoomRequest(): DeleteGameRoomRequest {
  return { id: "" };
}

export const DeleteGameRoomRequest: MessageFns<DeleteGameRoomRequest, "roshan.games.DeleteGameRoomRequest"> = {
  $type: "roshan.games.DeleteGameRoomRequest" as const,

  encode(message: DeleteGameRoomRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteGameRoomRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGameRoomRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGameRoomRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteGameRoomRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteGameRoomRequest>, I>>(base?: I): DeleteGameRoomRequest {
    return DeleteGameRoomRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteGameRoomRequest>, I>>(object: I): DeleteGameRoomRequest {
    const message = createBaseDeleteGameRoomRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteGameRoomResponse(): DeleteGameRoomResponse {
  return { room: undefined };
}

export const DeleteGameRoomResponse: MessageFns<DeleteGameRoomResponse, "roshan.games.DeleteGameRoomResponse"> = {
  $type: "roshan.games.DeleteGameRoomResponse" as const,

  encode(message: DeleteGameRoomResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.room !== undefined) {
      Room.encode(message.room, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteGameRoomResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGameRoomResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.room = Room.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGameRoomResponse {
    return { room: isSet(object.room) ? Room.fromJSON(object.room) : undefined };
  },

  toJSON(message: DeleteGameRoomResponse): unknown {
    const obj: any = {};
    if (message.room !== undefined) {
      obj.room = Room.toJSON(message.room);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteGameRoomResponse>, I>>(base?: I): DeleteGameRoomResponse {
    return DeleteGameRoomResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteGameRoomResponse>, I>>(object: I): DeleteGameRoomResponse {
    const message = createBaseDeleteGameRoomResponse();
    message.room = (object.room !== undefined && object.room !== null) ? Room.fromPartial(object.room) : undefined;
    return message;
  },
};

function createBaseStartGameRequest(): StartGameRequest {
  return { id: "" };
}

export const StartGameRequest: MessageFns<StartGameRequest, "roshan.games.StartGameRequest"> = {
  $type: "roshan.games.StartGameRequest" as const,

  encode(message: StartGameRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartGameRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartGameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartGameRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: StartGameRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartGameRequest>, I>>(base?: I): StartGameRequest {
    return StartGameRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartGameRequest>, I>>(object: I): StartGameRequest {
    const message = createBaseStartGameRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseStartGameResponse(): StartGameResponse {
  return {};
}

export const StartGameResponse: MessageFns<StartGameResponse, "roshan.games.StartGameResponse"> = {
  $type: "roshan.games.StartGameResponse" as const,

  encode(_: StartGameResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartGameResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartGameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StartGameResponse {
    return {};
  },

  toJSON(_: StartGameResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<StartGameResponse>, I>>(base?: I): StartGameResponse {
    return StartGameResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartGameResponse>, I>>(_: I): StartGameResponse {
    const message = createBaseStartGameResponse();
    return message;
  },
};

export type GameServiceDefinition = typeof GameServiceDefinition;
export const GameServiceDefinition = {
  name: "GameService",
  fullName: "roshan.games.GameService",
  methods: {
    startGame: {
      name: "StartGame",
      requestType: StartGameRequest,
      requestStream: false,
      responseType: StartGameResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              28,
              58,
              1,
              42,
              34,
              23,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              103,
              97,
              109,
              101,
              47,
              114,
              111,
              111,
              109,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    createRoom: {
      name: "CreateRoom",
      requestType: CreateGameRoomRequest,
      requestStream: false,
      responseType: CreateGameRoomResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              23,
              58,
              1,
              42,
              34,
              18,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              103,
              97,
              109,
              101,
              47,
              114,
              111,
              111,
              109,
              115,
            ]),
          ],
        },
      },
    },
    listRooms: {
      name: "ListRooms",
      requestType: ListGameRoomsRequest,
      requestStream: false,
      responseType: ListGameRoomsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              20,
              18,
              18,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              103,
              97,
              109,
              101,
              47,
              114,
              111,
              111,
              109,
              115,
            ]),
          ],
        },
      },
    },
    deleteRoom: {
      name: "DeleteRoom",
      requestType: DeleteGameRoomRequest,
      requestStream: false,
      responseType: DeleteGameRoomResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              25,
              42,
              23,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              103,
              97,
              109,
              101,
              47,
              114,
              111,
              111,
              109,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
